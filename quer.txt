speeds = from(bucket: "f1-telemetry")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r._measurement == "CarTelemetry" and r._field == "speed")
    |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)

names = from(bucket: "f1-telemetry")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r._measurement == "Participants" and r._field == "name")
    |> last()
    |> keep(columns: ["carIndex", "_value"])
    |> rename(columns: {_value: "driverName"})

join(tables: {s: speeds, n: names}, on: ["carIndex"])
    // THIS IS THE FIX: Keep only the essential columns before pivoting.
    // This removes the extra tags that were cluttering the legend.
    |> keep(columns: ["_time", "_value", "driverName"])
    |> pivot(rowKey:["_time"], columnKey: ["driverName"], valueColumn: "_value")
    |> yield(name: "All Car Speeds")


========================================================================


gears = from(bucket: "f1-telemetry")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r._measurement == "CarTelemetry" and r._field == "gear")
    |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
    // FIX: Explicitly cast the gear value to an integer to prevent type issues.
    |> toInt()

names = from(bucket: "f1-telemetry")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r._measurement == "Participants" and r._field == "name")
    |> last()
    |> keep(columns: ["carIndex", "_value"])
    |> rename(columns: {_value: "driverName"})

join(tables: {g: gears, n: names}, on: ["carIndex"])
    |> keep(columns: ["_time", "_value", "driverName"])
    |> pivot(rowKey:["_time"], columnKey: ["driverName"], valueColumn: "_value")
    |> yield(name: "All Car Gears")


========================================================================


inputs = from(bucket: "f1-telemetry")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r._measurement == "CarTelemetry")
    |> filter(fn: (r) => r._field == "throttle" or r._field == "brake")
    |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)

names = from(bucket: "f1-telemetry")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r._measurement == "Participants" and r._field == "name")
    |> last()
    |> keep(columns: ["carIndex", "_value"])
    |> rename(columns: {_value: "driverName"})

join(tables: {data: inputs, names: names}, on: ["carIndex"])
    |> keep(columns: ["_time", "_value", "_field", "driverName"])
    |> pivot(rowKey:["_time"], columnKey: ["driverName", "_field"], valueColumn: "_value")
    |> yield(name: "Throttle and Brake")